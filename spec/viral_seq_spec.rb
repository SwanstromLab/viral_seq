RSpec.describe ViralSeq do
  it "has a version number" do
    expect(ViralSeq::VERSION).not_to be nil
  end

  it "has reverse complement function" do
    expect("ACTG".rc).to eq "CAGT"
  end

  it "sequence_locator function PR example works" do
    seq = "CCTCAGATCACTCTTTGGCAACGACCCCTAGTTACAATAAGGGTAGGGGGGCAACTAAAGGAAGCCCTATTAGATACAGGAGCAGATGATACAGTATTAGAAGAAATAAATTTGCCAGGAAGATGGAAACCAAAAATGATAGGGGGAATTGGAGGTTTTATCAAAGTAAGACAATATGATCAGATACCCATAGAAATTTGTGGACATGAAGCTATAGGTACAGTATTAGTGGGACCTACACCTGTCAACATAATTGGGAGAAATCTGTTGACTCAGATTGGTTGCACTCTAAATTTT"
    loc = ViralSeq.sequence_locator(seq, :HXB2, 'muscle')
    expect(loc[0]).to eq 2253
    expect(loc[1]).to eq 2549
  end

  it "locator function V1V3 example works" do
    seq = "AAATTAACCCCACTCTGTGTTACCTTAAATTGCACTAACGCGGCCAACAGGACCAATAATGTGACCACTGAGACCAATGTGACCACTGAGACCAGAATTTACCCAGACATGATAGGTGAAATAAAAAATTGCTCTTTCAATACCTCCACAAACCTAGTAGGTAAGGATCAGAAAAATTATGCACTGTTTCGCAGCCTTGATATAGTACCAATAGAAGATAATAAGAGTAGTAATAGTAGTAATTTTACCAGCTATATGCTGACAAGCACAGTGCAATGTACACATGGAATTAGGCCAGTAGTGTCCACTCAACTGCTGTTAAATGGTAGTCTAGCAGAAGAAGACATAGTAATTAGGTCTGAGAACATCACAAATAATGTTAAAAACATAATAGTGCACCTGAATGAATCTGTAGAGATTAATTGTACGAGACCAGGCAACAATACAAGAAAAAGTATAACTATAGGACCAGGGAGAGCATTTTATGCCACAGGAGATATAATAGGAGATATAAGAAAA"
    loc = ViralSeq.sequence_locator(seq, :HXB2, 'muscle')
    expect(loc[1]).to eq 7208
    expect(loc[0]).to eq 6585
    expect(loc[2]).to eq 58.8
  end

  it "has sequence_clip function" do
    seq = "CCTCAGATCACTCTTTGGCAACGACCCCTAGTTACAATAAGGGTAGGGGGGCAACTAAAGGAAGCCCTATTAGATACAGGAGCAGATGATACAGTATTAGAAGAAATAAATTTGCCAGGAAGATGGAAACCAAAAATGATAGGGGGAATTGGAGGTTTTATCAAAGTAAGACAATATGATCAGATACCCATAGAAATTTGTGGACATGAAGCTATAGGTACAGTATTAGTGGGACCTACACCTGTCAACATAATTGGGAGAAATCTGTTGACTCAGATTGGTTGCACTCTAAATTTT"
    clip = ViralSeq.sequence_clip(seq, 2333, 2433, :HXB2, 'muscle')
    expect(clip).to eq 'AGCAGATGATACAGTATTAGAAGAAATAAATTTGCCAGGAAGATGGAAACCAAAAATGATAGGGGGAATTGGAGGTTTTATCAAAGTAAGACAATATGATC'
  end

  it "can do mutiple sequence alignment with MUSCLE" do
    seq = %w{>CCCGCGGTTA_159_PD001-1_V1V3_combined AAATTAACCCCACTCTGTGTTACCTTAAATTGCACTAATGCGGCCAACAGAACCAATGTGACCACTGAGACCAGAATTTACCCAGACATGATAGGTGAAATAAAAAACTGCTCTTTCAATACCTCCACAGGCCTAGTAGGTAAGGATCAGAAAAATTATGCACTGTTTCGCAGCTTTGATGTAGTACCAATAGAACATAATAATAGTAGTAATTTTACCAGCTATATGCTGACAAGTTGTAACACCTCAGTCATTAAACAGGCCTGCACAGTGCAATGTACACATGGAATTAGGCCAGTAGTGTCCACTCAACTGCTGTTAAATGGTAGTCTAGCAGAAGAAGACATAGTAATTAGGTCTGAGAACATCACAAATAATGTTAAAAACATAATAGTGCACCTGAATGAATCTGTAGAGATTAAATGTATGAGACCAGGCAACAATACAAGAAAAAGTATAACTATAGGACCAGGGAGAGCATTTTATGCCACAGGAGATATAATAGGAGATATAAGAAAA >TGATCTGTGC_195_PD001-1_V1V3_combined AAATTAACCCCACTCTGTGTTACCTTAAATTGCACTAATGCGGCCAACAGAACCAATGTGACCACTGAGACCAGAATTTACCCAGACATGATAGGTGAAATAAAAAACTGCTCTTTCAATACCTCCACAGGCCTAGTAGGTAAGGATCAGAAAAATTATGCACTGTTTCGCAGCTTTGATGTAGTACCAATAGAACATAATAATAGTAGTAATTTTACCAGCTATATGCTGACAAGTTGTAACACCTCAGTCATTAAACAGGCCTGCACAGTGCAATGTACACATGGAATTAGGCCAGTAGTGTCCACTCAACTGCTGTTAAATGGTAGTCTAGCAGAAGAAGACATAGTAATTAGGTCTGAGAACATCACAAATAATGTTAAAAACATAATAGTGCACCTGAATGAATCTGTAGAGATTAAATGTATGAGACCAGGCAACAATACAAGAAAAAGTATAACTATAGGACCAGGGAGAGCATTTTATGCCACAGGAGATATAATAGGAGATATAAGAAAA >TAGAGGACTT_35_PD001-8_V1V3_combined AAGCTAACTCCACTCTGTGTTACCTTAAATTGCACTGACTATGTGGGGAATAATACTAAGAATGCCACTAAGAGTAAGGAAGAAATAGAAATGAAAAACTGCTCTTTCAATGTCACTGAAGTCATAAGGGATAAGGTGCAGAAAGAATATGCACTGTTTTATAAACTTGATATAGTACCAATAGATGAAGGTGGTCTTAACAAGACTGTTAATAATACCACATATAGGTTGATAAGTTGTAACACCTCAGTTATTAGACAGGCCTGCACAGTACAATGTACACATGGAATTAGGCCAGTAGTGTCAACACAATTGCTATTAAATGGTACTCTAGCAAAAGATAAGGTAGTAATTAGATCTGAAAATTTCACAGACAATGCAAAAACTATAATAGTACAGCTGAACGAATCTGTAGAAATTCACTGTGCAAGACCCAACAACAATACAAGAAAAAGTATACATATAGCACCAGGAAGAGCATTTTATGCAACAGGACAAATAATAGGAGATATAAGAAAA >AGTGAAAGTC_91_PD001-8_V1V3_combined AAGCTAACTCCACTCTGTGTTACTTTAAATTGCACTGACTATGTGGGGAATAATACTAAGAATGCCACTAAGAGTAAGGAAGAAATAGAAATGAAAAACTGCTCTTTCAATGTCACTGAAGTCATAAGAGATAAGGTGCAGAAAGAATATGCACTGTTTTATAAACTTGATATAGTGCCAATAGAGGAAGAGGGTCTTAACAAGACTGTTAATAATACCACATATAGGTTGATAAGTTGTAACACCTCAGTCATTAGACAGGCATGCACAGTACAATGTACACATGGAATTAGGCCAGTAGTGTCAACACAACTGCTATTAAATGGTACTCTAGCAAAAGATAAGGTAGTAATTAGATCTGAAAATTTCACAGACAATGCAAAAACTATAATAGTACAGCTGAACGAGTCTGTAGAAATTCACTGTGCAAGACCCAACAACAATACAAGAAAAAGTATACATATAGCACCAGGGAGAGCATTTTATGCAACAGGACAAATAATAGGAGATATAAGAAAA}
    seq_hash = Hash[*seq]
    aln_seq = ViralSeq.muscle_align_multi(seq_hash)
    expect(aln_seq.size).to eq 4
  end

  it "has a function to make consensus sequences" do
    seq_array = %w{

      ATTTTTTTTT
      AATTTTTTTT
      AAATTTTTTT
      AAAATTTTTT
      AAAAATTTTT
      AAAAAATTTT
      AAAAAAATTT
      AAAAAAAATT
      AAAAAAAAAT
      AAAAAAAAAA

     }
     expect(ViralSeq.consensus(seq_array)).to eq 'AAAAAWTTTT'
     expect(ViralSeq.consensus(seq_array, 0.6)).to eq 'AAAAANTTTT'
     expect(ViralSeq.consensus(seq_array, 0.7)).to eq 'AAAANNNTTT'
     expect(ViralSeq.consensus(seq_array, 0.8)).to eq 'AAANNNNNTT'
     expect(ViralSeq.consensus(seq_array, 0.9)).to eq 'AANNNNNNNT'
     expect(ViralSeq.consensus(seq_array, 0.4)).to eq 'AAAAWWWTTT'
  end

  it "has a function to calculate Primer ID consensus cut-off" do
    expect(ViralSeq.calculate_pid_cut_off(1000, 0.021)).to eq 17
    expect(ViralSeq.calculate_pid_cut_off(10)).to eq 2
  end
end
